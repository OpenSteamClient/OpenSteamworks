using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using OpenSteamworks.Attributes;
using OpenSteamworks.Callbacks.Structs;

namespace OpenSteamworks.Callbacks;

/// <summary>
/// The contents of this class get partially autogenerated. Do not rename!
/// </summary>
internal static partial class CallbackMetadata {
	private const string ARRAY_JOIN_SEPARATOR = ", ";
	private const string BYTE_ARRAY_JOIN_SEPARATOR = ", ";

	private static unsafe T GetStructForCallback<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors)] T>(byte[] data) where T: struct {
		CallbackSizeException.ThrowOrWarn(data.Length, Marshal.SizeOf<T>(), typeof(T).Name);

		fixed (byte* ptr = data) {
			return Marshal.PtrToStructure<T>((nint)ptr);
		}
	}

	private static string EnumerableToString<T>(IEnumerable<T>? obj) {
		if (obj is null || obj == null) {
			return "(null)";
		}

		if (obj is IEnumerable<byte> byteArr)
		{
			return $"[{string.Join(BYTE_ARRAY_JOIN_SEPARATOR, byteArr.Select(b => $"0x{b.ToString("X2")}"))}]";
		}

		return $"[{string.Join(ARRAY_JOIN_SEPARATOR, obj)}]";
	}

	private static string FieldToString(object? obj) {
		if (obj is null) {
			return "(null)";
		}

		try
		{
			// Since this is defined by the object, it can throw exceptions.
			if (obj == null) {
				return "(null)";
			}

			// This is also defined by the object, and can throw exceptions.
			return Convert.ToString(obj) ?? "(null)";
		}
		catch (Exception)
		{
			return "(threw an exception)";
		}
	}

	// public const int FocusedAndFocusableWindowsUpdate_t_ID = 1040044;
	// public static string FocusedAndFocusableWindowsUpdate_t_ToString(FocusedAndFocusableWindowsUpdate_t cb) {
	// 	StringBuilder builder = new();
	// 	builder.AppendLine("Begin Callback FocusedAndFocusableWindowsUpdate_t");
	// 	builder.AppendLine($"	currentlyFocusedAppID: {FieldToString(cb.currentlyFocusedAppID)}");
	// 	builder.AppendLine($"	unkLen1: {FieldToString(cb.unkLen1)}");
	// 	builder.AppendLine($"	unk1: {EnumerableToString(cb.unk1)}");
	// 	builder.AppendLine($"	unkLen2: {FieldToString(cb.unkLen2)}");
	// 	builder.AppendLine($"	unk2: {EnumerableToString(cb.unk2)}");
	// 	builder.AppendLine($"	unkLen3: {FieldToString(cb.unkLen3)}");
	// 	builder.AppendLine($"	unk3: {EnumerableToString(cb.unk3)}");
	// 	builder.AppendLine("End Callback FocusedAndFocusableWindowsUpdate_t");
	// 	return builder.ToString();
	// }

	// public static int GetIDFromType<T>() where T: struct {
	// 	if (typeof(T) == typeof(FocusedAndFocusableWindowsUpdate_t)) {
	// 		return FocusedAndFocusableWindowsUpdate_t_ID;
	// 	}

	// 	throw new NotImplementedException("Invalid type");
	// }

	// public static string CallbackToString(int callbackID, byte[] data) {
	// 	return callbackID switch
	// 	{
	// 		FocusedAndFocusableWindowsUpdate_t_ID => FocusedAndFocusableWindowsUpdate_t_ToString(GetStructForCallback<FocusedAndFocusableWindowsUpdate_t>(data)),
	// 		_ => string.Empty,
	// 	};
	// }
}
