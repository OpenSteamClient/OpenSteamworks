//==========================  AUTO-GENERATED FILE  ================================
//
// This file is partially auto-generated.
// If functions are removed, your changes to that function will be lost.
// Parameter types and names however are preserved if the function stays unchanged.
// Feel free to change parameters to be more accurate. 
//
//=============================================================================

#pragma once

#include "clienttypes.h"

class IClientFriends
{
public:
    virtual const char *GetPersonaName() = 0; //argc: 0, index 1
    virtual SteamAPICall_t SetPersonaName(const char *pchPersonaName) = 0; //argc: 1, index 2
    virtual bool IsPersonaNameSet() = 0; //argc: 0, index 3
    virtual EPersonaState GetPersonaState() = 0; //argc: 0, index 4
    virtual void SetPersonaState(EPersonaState eNewState) = 0; //argc: 1, index 5
    virtual bool NotifyUIOfMenuChange(bool,bool,bool,bool) = 0; //argc: 4, index 6
    virtual int GetFriendCount(EFriendFlags eFriendFlags) = 0; //argc: 1, index 7
    virtual unknown_ret GetFriendArray() = 0; //argc: 4, index 8
    virtual unknown_ret GetFriendArrayInGame() = 0; //argc: 3, index 9
    virtual CSteamID GetFriendByIndex(int iFriend, EFriendFlags eFriendFlags) = 0; //argc: 3, index 10
    virtual int GetOnlineFriendCount() = 0; //argc: 0, index 11
    virtual EFriendRelationship GetFriendRelationship(CSteamID steamIDFriend) = 0; //argc: 2, index 12
    virtual EPersonaState GetFriendPersonaState(CSteamID steamIDFriend) = 0; //argc: 2, index 13
    virtual const char *GetFriendPersonaName(CSteamID steamIDFriend) = 0; //argc: 2, index 14
    virtual int GetSmallFriendAvatar(CSteamID steamIDFriend) = 0; //argc: 2, index 15
    virtual int GetMediumFriendAvatar(CSteamID steamIDFriend) = 0; //argc: 2, index 16
    virtual int GetLargeFriendAvatar(CSteamID steamIDFriend) = 0; //argc: 2, index 17
    virtual bool BGetFriendAvatarURL(char *pAvatar, int cubAvatar, CSteamID steamIDFriend, int unk) = 0; //argc: 5, index 18
    virtual bool GetFriendAvatarHash(char *pHash, int cubHash, CSteamID steamIDFriend) = 0; //argc: 4, index 19
    virtual void SetFriendRegValue(CSteamID steamIDFriend, const char *pchKey, const char *pchValue) = 0; //argc: 4, index 20
    virtual const char *GetFriendRegValue(CSteamID steamIDFriend, const char *pchKey) = 0; //argc: 3, index 21
    virtual bool DeleteFriendRegValue(CSteamID steamIDFriend, const char *pchKey) = 0; //argc: 3, index 22
    virtual bool GetFriendGamePlayed(CSteamID steamIDFriend, FriendGameInfo_t *pFriendGameInfo) = 0; //argc: 3, index 23
    virtual const char *GetFriendGamePlayedExtraInfo(CSteamID steamIDFriend) = 0; //argc: 2, index 24
    virtual CSteamID GetFriendGameServer(CSteamID steamIDFriend) = 0; //argc: 3, index 25
    virtual EPersonaStateFlag GetFriendPersonaStateFlags(CSteamID steamIDFriend) = 0; //argc: 2, index 26
    virtual unknown_ret GetFriendSessionStateInfo() = 0; //argc: 3, index 27
    virtual EUserRestriction GetFriendRestrictions(CSteamID steamIDFriend) = 0; //argc: 2, index 28
    virtual uint64 GetFriendBroadcastID(CSteamID steamIDFriend) = 0; //argc: 2, index 29
    virtual const char *GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName) = 0; //argc: 3, index 30
    virtual SteamAPICall_t RequestPersonaNameHistory(CSteamID steamIDFriend) = 0; //argc: 2, index 31
    virtual const char *GetFriendPersonaNameHistoryAndDate(CSteamID steamIDFriend, int iPersonaName, RTime32 *pTime) = 0; //argc: 4, index 32
    virtual bool AddFriend(CSteamID steamIDFriend) = 0; //argc: 2, index 33
    virtual bool RemoveFriend(CSteamID steamIDFriend) = 0; //argc: 2, index 34
    virtual bool HasFriend(CSteamID steamIDFriend, EFriendFlags eFriendFlags) = 0; //argc: 3, index 35
    virtual bool RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly) = 0; //argc: 3, index 36
    virtual bool SetIgnoreFriend(CSteamID steamIDFriend, bool blocked) = 0; //argc: 3, index 37
    virtual bool ReportChatDeclined(CSteamID steamIDFriend) = 0; //argc: 2, index 38
    virtual bool CreateFriendsGroup(const char *pchGroupName) = 0; //argc: 1, index 39
    virtual bool DeleteFriendsGroup(FriendsGroupID_t friendsGroupID) = 0; //argc: 1, index 40
    virtual bool RenameFriendsGroup(const char *pchNewGroupName, FriendsGroupID_t friendsGroupID) = 0; //argc: 2, index 41
    virtual bool AddFriendToGroup(CSteamID steamIDFriend, FriendsGroupID_t friendsGroupID) = 0; //argc: 3, index 42
    virtual bool RemoveFriendFromGroup(CSteamID steamIDFriend, FriendsGroupID_t friendsGroupID) = 0; //argc: 3, index 43
    virtual bool IsFriendMemberOfFriendsGroup(CSteamID steamIDFriend, FriendsGroupID_t friendsGroupID) = 0; //argc: 3, index 44
    virtual int GetFriendsGroupCount() = 0; //argc: 0, index 45
    virtual FriendsGroupID_t GetFriendsGroupIDByIndex(int iFG) = 0; //argc: 1, index 46
    virtual const char *GetFriendsGroupName(FriendsGroupID_t friendsGroupID) = 0; //argc: 1, index 47
    virtual int GetFriendsGroupMembershipCount(FriendsGroupID_t friendsGroupID) = 0; //argc: 1, index 48
    virtual CSteamID GetFirstFriendsGroupMember(FriendsGroupID_t friendsGroupID) = 0; //argc: 2, index 49
    virtual CSteamID GetNextFriendsGroupMember(FriendsGroupID_t friendsGroupID) = 0; //argc: 2, index 50
    virtual unknown_ret GetGroupFriendsMembershipCount() = 0; //argc: 2, index 51
    virtual unknown_ret GetFirstGroupFriendsMember() = 0; //argc: 2, index 52
    virtual unknown_ret GetNextGroupFriendsMember() = 0; //argc: 2, index 53
    virtual const char *GetPlayerNickname(CSteamID steamIDFriend) = 0; //argc: 2, index 54
    virtual bool SetPlayerNickname(CSteamID steamIDFriend, const char *pchNewNickname) = 0; //argc: 3, index 55
    virtual int GetFriendSteamLevel(CSteamID steamIDFriend) = 0; //argc: 2, index 56
    virtual int GetChatMessagesCount(CSteamID steamIDFriend) = 0; //argc: 2, index 57
    virtual int GetChatMessage(CSteamID steamIDFriend, int iMsg, void *pMsg, int cubMsg, EChatEntryType *pMsgType, CSteamID *pUser, RTime32 *pTime) = 0; //argc: 8, index 58
    virtual bool SendMsgToFriend(CSteamID steamIDFriend, EChatEntryType eFriendMsgType, const char *pchMsg) = 0; //argc: 4, index 59
    virtual void ClearChatHistory(CSteamID steamIDFriend) = 0; //argc: 2, index 60
    virtual int GetKnownClanCount() = 0; //argc: 0, index 61
    virtual CSteamID GetKnownClanByIndex(int iClan) = 0; //argc: 2, index 62
    virtual int GetClanCount() = 0; //argc: 0, index 63
    virtual CSteamID GetClanByIndex(int iClan) = 0; //argc: 2, index 64
    virtual const char *GetClanName(CSteamID steamIDClan) = 0; //argc: 2, index 65
    virtual const char *GetClanTag(CSteamID steamIDClan) = 0; //argc: 2, index 66
    virtual bool GetFriendActivityCounts(int *pnOnline, int *pnInGame, bool bExcludeTaggedFriends) = 0; //argc: 3, index 67
    virtual bool GetClanActivityCounts(CSteamID steamIDClan, int *pnOnline, int *pnInGame, int *pnChatting) = 0; //argc: 5, index 68
    virtual SteamAPICall_t DownloadClanActivityCounts(CSteamID *psteamIDClans, int cClansToRequest) = 0; //argc: 2, index 69
    virtual bool GetFriendsGroupActivityCounts(FriendsGroupID_t friendsGroupID, int *pnOnline, int *pnInGame) = 0; //argc: 3, index 70
    virtual bool IsClanPublic(CSteamID steamIDClan) = 0; //argc: 2, index 71
    virtual bool IsClanOfficialGameGroup(CSteamID steamIDClan) = 0; //argc: 2, index 72
    virtual SteamAPICall_t JoinClanChatRoom(CSteamID steamIDClanChat) = 0; //argc: 2, index 73
    virtual bool LeaveClanChatRoom(CSteamID steamIDClanChat) = 0; //argc: 2, index 74
    virtual int GetClanChatMemberCount(CSteamID steamIDClanChat) = 0; //argc: 2, index 75
    virtual CSteamID GetChatMemberByIndex(CSteamID steamIDClanChat, int iUser) = 0; //argc: 4, index 76
    virtual bool SendClanChatMessage(CSteamID steamIDClanChat, const char *pchText) = 0; //argc: 3, index 77
    virtual int GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, void *prgchText, int cchTextMax, EChatEntryType *peChatEntryType, CSteamID *psteamidChatter) = 0; //argc: 7, index 78
    virtual bool IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser) = 0; //argc: 4, index 79
    virtual bool IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat) = 0; //argc: 2, index 80
    virtual bool OpenClanChatWindowInSteam(CSteamID steamIDClanChat) = 0; //argc: 2, index 81
    virtual bool CloseClanChatWindowInSteam(CSteamID steamIDClanChat) = 0; //argc: 2, index 82
    virtual bool SetListenForFriendsMessages(bool bInterceptEnabled) = 0; //argc: 1, index 83
    virtual bool ReplyToFriendMessage(CSteamID steamIDFriend, const char *pchMsgToSend) = 0; //argc: 3, index 84
    virtual int GetFriendMessage(CSteamID steamIDFriend, int iMessageID, void *pvData, int cubData, EChatEntryType *peChatEntryType) = 0; //argc: 6, index 85
    virtual bool InviteFriendToClan(CSteamID steamIDFriend, CSteamID steamIDClan) = 0; //argc: 4, index 86
    virtual bool AcknowledgeInviteToClan(CSteamID steamIDfriend, bool bAccept) = 0; //argc: 3, index 87
    virtual int GetFriendCountFromSource(CSteamID steamIDSource) = 0; //argc: 2, index 88
    virtual CSteamID GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend) = 0; //argc: 4, index 89
    virtual bool IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource) = 0; //argc: 4, index 90
    virtual int GetCoplayFriendCount() = 0; //argc: 0, index 91
    virtual CSteamID GetCoplayFriend(int iCoplayFriend) = 0; //argc: 2, index 92
    virtual int GetFriendCoplayTime(CSteamID steamIDFriend) = 0; //argc: 2, index 93
    virtual AppId_t GetFriendCoplayGame(CSteamID steamIDFriend) = 0; //argc: 2, index 94
    virtual bool SetRichPresence(AppId_t nAppID, const char *pchKey, const char *pchValue) = 0; //argc: 3, index 95
    virtual void ClearRichPresence(AppId_t nAppID) = 0; //argc: 1, index 96
    virtual const char *GetFriendRichPresence(AppId_t nAppId, CSteamID steamIDUser, const char *pchKey) = 0; //argc: 4, index 97
    virtual int GetFriendRichPresenceKeyCount(AppId_t nAppId, CSteamID steamIDUser) = 0; //argc: 3, index 98
    virtual const char *GetFriendRichPresenceKeyByIndex(AppId_t nAppId, CSteamID steamIDUser, int iKey) = 0; //argc: 4, index 99
    virtual void RequestFriendRichPresence(AppId_t nAppId, CSteamID steamIDUser) = 0; //argc: 3, index 100
    virtual bool JoinChatRoom(CSteamID steamIDChat) = 0; //argc: 2, index 101
    virtual void LeaveChatRoom(CSteamID steamIDChat) = 0; //argc: 2, index 102
    virtual bool InviteUserToChatRoom(CSteamID steamIDChat, CSteamID steamIDUser) = 0; //argc: 4, index 103
    virtual bool SendChatMsg(CSteamID steamIDChat, EChatEntryType eMsg, const char *pchMsg) = 0; //argc: 4, index 104
    virtual unknown_ret GetChatRoomMessagesCount() = 0; //argc: 2, index 105
    virtual unknown_ret GetChatRoomEntry() = 0; //argc: 7, index 106
    virtual unknown_ret ClearChatRoomHistory() = 0; //argc: 2, index 107
    virtual unknown_ret SerializeChatRoomDlg() = 0; //argc: 4, index 108
    virtual unknown_ret GetSizeOfSerializedChatRoomDlg() = 0; //argc: 2, index 109
    virtual unknown_ret GetSerializedChatRoomDlg() = 0; //argc: 6, index 110
    virtual unknown_ret ClearSerializedChatRoomDlg() = 0; //argc: 2, index 111
    virtual unknown_ret KickChatMember() = 0; //argc: 4, index 112
    virtual unknown_ret BanChatMember() = 0; //argc: 4, index 113
    virtual unknown_ret UnBanChatMember() = 0; //argc: 4, index 114
    virtual unknown_ret SetChatRoomType() = 0; //argc: 3, index 115
    virtual unknown_ret GetChatRoomLockState() = 0; //argc: 3, index 116
    virtual unknown_ret GetChatRoomPermissions() = 0; //argc: 3, index 117
    virtual unknown_ret SetChatRoomModerated() = 0; //argc: 3, index 118
    virtual unknown_ret BChatRoomModerated() = 0; //argc: 2, index 119
    virtual unknown_ret NotifyChatRoomDlgsOfUIChange() = 0; //argc: 6, index 120
    virtual unknown_ret TerminateChatRoom() = 0; //argc: 2, index 121
    virtual unknown_ret GetChatRoomCount() = 0; //argc: 0, index 122
    virtual unknown_ret GetChatRoomByIndex() = 0; //argc: 2, index 123
    virtual unknown_ret GetChatRoomName() = 0; //argc: 2, index 124
    virtual unknown_ret BGetChatRoomMemberDetails() = 0; //argc: 6, index 125
    virtual unknown_ret CreateChatRoom() = 0; //argc: 14, index 126
    virtual unknown_ret JoinChatRoomGroup() = 0; //argc: 4, index 127
    virtual unknown_ret ShowChatRoomGroupInvite() = 0; //argc: 1, index 128
    virtual unknown_ret VoiceCallNew() = 0; //argc: 4, index 129
    virtual unknown_ret VoiceCall() = 0; //argc: 4, index 130
    virtual unknown_ret VoiceHangUp() = 0; //argc: 3, index 131
    virtual unknown_ret SetVoiceSpeakerVolume() = 0; //argc: 1, index 132
    virtual unknown_ret SetVoiceMicrophoneVolume() = 0; //argc: 1, index 133
    virtual unknown_ret SetAutoAnswer() = 0; //argc: 1, index 134
    virtual unknown_ret VoiceAnswer() = 0; //argc: 1, index 135
    virtual unknown_ret AcceptVoiceCall() = 0; //argc: 4, index 136
    virtual unknown_ret VoicePutOnHold() = 0; //argc: 2, index 137
    virtual unknown_ret BVoiceIsLocalOnHold() = 0; //argc: 1, index 138
    virtual unknown_ret BVoiceIsRemoteOnHold() = 0; //argc: 1, index 139
    virtual unknown_ret SetDoNotDisturb() = 0; //argc: 1, index 140
    virtual unknown_ret EnableVoiceNotificationSounds() = 0; //argc: 1, index 141
    virtual unknown_ret SetPushToTalkEnabled() = 0; //argc: 2, index 142
    virtual unknown_ret IsPushToTalkEnabled() = 0; //argc: 0, index 143
    virtual unknown_ret IsPushToMuteEnabled() = 0; //argc: 0, index 144
    virtual unknown_ret SetPushToTalkKey() = 0; //argc: 1, index 145
    virtual unknown_ret GetPushToTalkKey() = 0; //argc: 0, index 146
    virtual unknown_ret IsPushToTalkKeyDown() = 0; //argc: 0, index 147
    virtual unknown_ret EnableVoiceCalibration() = 0; //argc: 1, index 148
    virtual unknown_ret IsVoiceCalibrating() = 0; //argc: 0, index 149
    virtual unknown_ret GetVoiceCalibrationSamplePeak() = 0; //argc: 0, index 150
    virtual unknown_ret SetMicBoost() = 0; //argc: 1, index 151
    virtual unknown_ret GetMicBoost() = 0; //argc: 0, index 152
    virtual unknown_ret HasHardwareMicBoost() = 0; //argc: 0, index 153
    virtual unknown_ret GetMicDeviceName() = 0; //argc: 0, index 154
    virtual unknown_ret StartTalking() = 0; //argc: 1, index 155
    virtual unknown_ret EndTalking() = 0; //argc: 1, index 156
    virtual unknown_ret VoiceIsValid() = 0; //argc: 1, index 157
    virtual unknown_ret SetAutoReflectVoice() = 0; //argc: 1, index 158
    virtual unknown_ret GetCallState() = 0; //argc: 1, index 159
    virtual unknown_ret GetVoiceMicrophoneVolume() = 0; //argc: 0, index 160
    virtual unknown_ret GetVoiceSpeakerVolume() = 0; //argc: 0, index 161
    virtual unknown_ret TimeSinceLastVoiceDataReceived() = 0; //argc: 1, index 162
    virtual unknown_ret TimeSinceLastVoiceDataSend() = 0; //argc: 1, index 163
    virtual unknown_ret BCanSend() = 0; //argc: 1, index 164
    virtual unknown_ret BCanReceive() = 0; //argc: 1, index 165
    virtual unknown_ret GetEstimatedBitsPerSecond() = 0; //argc: 2, index 166
    virtual unknown_ret GetPeakSample() = 0; //argc: 2, index 167
    virtual unknown_ret SendResumeRequest() = 0; //argc: 1, index 168
    virtual unknown_ret OpenFriendsDialog() = 0; //argc: 2, index 169
    virtual unknown_ret OpenChatDialog() = 0; //argc: 2, index 170
    virtual unknown_ret OpenInviteToTradeDialog() = 0; //argc: 2, index 171
    virtual unknown_ret StartChatRoomVoiceSpeaking() = 0; //argc: 4, index 172
    virtual unknown_ret EndChatRoomVoiceSpeaking() = 0; //argc: 4, index 173
    virtual unknown_ret GetFriendLastLogonTime() = 0; //argc: 2, index 174
    virtual unknown_ret GetFriendLastLogoffTime() = 0; //argc: 2, index 175
    virtual unknown_ret GetChatRoomVoiceTotalSlotCount() = 0; //argc: 2, index 176
    virtual unknown_ret GetChatRoomVoiceUsedSlotCount() = 0; //argc: 2, index 177
    virtual unknown_ret GetChatRoomVoiceUsedSlot() = 0; //argc: 4, index 178
    virtual unknown_ret GetChatRoomVoiceStatus() = 0; //argc: 4, index 179
    virtual unknown_ret BChatRoomHasAvailableVoiceSlots() = 0; //argc: 2, index 180
    virtual unknown_ret BIsChatRoomVoiceSpeaking() = 0; //argc: 4, index 181
    virtual unknown_ret GetChatRoomPeakSample() = 0; //argc: 5, index 182
    virtual unknown_ret ChatRoomVoiceRetryConnections() = 0; //argc: 2, index 183
    virtual unknown_ret SetPortTypes() = 0; //argc: 1, index 184
    virtual unknown_ret ReinitAudio() = 0; //argc: 0, index 185
    virtual void SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking) = 0; //argc: 3, index 186
    virtual bool IsInGameVoiceSpeaking() = 0; //argc: 0, index 187
    virtual void ActivateGameOverlay(const char *pchDialog) = 0; //argc: 1, index 188
    virtual void ActivateGameOverlayToUser(const char *pchDialog, CSteamID steamID) = 0; //argc: 3, index 189
    virtual void ActivateGameOverlayToWebPage(const char *pchURL, EActivateGameOverlayToWebPageMode eMode) = 0; //argc: 2, index 190
    virtual void ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag) = 0; //argc: 2, index 191
    virtual void ActivateGameOverlayInviteDialog(CSteamID steamIDLobby) = 0; //argc: 2, index 192
    virtual void ActivateGameOverlayRemotePlayTogetherInviteDialog(CSteamID steamIDLobby) = 0; //argc: 2, index 193
    virtual void ActivateGameOverlayInviteDialogConnectString(const char *pchConnectString) = 0; //argc: 1, index 194
    virtual unknown_ret ProcessActivateGameOverlayInMainUI() = 0; //argc: 6, index 195
    virtual unknown_ret NotifyGameOverlayStateChanged() = 0; //argc: 4, index 196
    virtual unknown_ret NotifyGameServerChangeRequested() = 0; //argc: 2, index 197
    virtual unknown_ret NotifyLobbyJoinRequested() = 0; //argc: 5, index 198
    virtual unknown_ret NotifyRichPresenceJoinRequested() = 0; //argc: 4, index 199
    virtual unknown_ret GetClanRelationship() = 0; //argc: 2, index 200
    virtual unknown_ret GetClanInviteCount() = 0; //argc: 0, index 201
    virtual unknown_ret GetFriendClanRank() = 0; //argc: 4, index 202
    virtual unknown_ret VoiceIsAvailable() = 0; //argc: 0, index 203
    virtual unknown_ret TestVoiceDisconnect() = 0; //argc: 1, index 204
    virtual unknown_ret TestChatRoomPeerDisconnect() = 0; //argc: 4, index 205
    virtual unknown_ret TestVoicePacketLoss() = 0; //argc: 1, index 206
    virtual unknown_ret FindFriendVoiceChatHandle() = 0; //argc: 2, index 207
    virtual unknown_ret RequestFriendsWhoPlayGame() = 0; //argc: 1, index 208
    virtual unknown_ret GetCountFriendsWhoPlayGame() = 0; //argc: 1, index 209
    virtual unknown_ret GetFriendWhoPlaysGame() = 0; //argc: 3, index 210
    virtual unknown_ret GetCountFriendsInGame() = 0; //argc: 1, index 211
    virtual void SetPlayedWith(CSteamID steamIDUserPlayedWith) = 0; //argc: 2, index 212
    virtual SteamAPICall_t RequestClanOfficerList(CSteamID steamIDClan) = 0; //argc: 2, index 213
    virtual CSteamID GetClanOwner(CSteamID steamIDClan) = 0; //argc: 3, index 214
    virtual int GetClanOfficerCount(CSteamID steamIDClan) = 0; //argc: 2, index 215
    virtual CSteamID GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer) = 0; //argc: 4, index 216
    virtual EUserRestriction GetUserRestrictions() = 0; //argc: 0, index 217
    virtual unknown_ret RequestFriendProfileInfo() = 0; //argc: 2, index 218
    virtual unknown_ret GetFriendProfileInfo() = 0; //argc: 3, index 219
    virtual bool InviteUserToGame(AppId_t nAppId, CSteamID steamIDUser, const char *pchConnectString) = 0; //argc: 4, index 220
    virtual unknown_ret RequestTrade() = 0; //argc: 2, index 221
    virtual unknown_ret TradeResponse() = 0; //argc: 2, index 222
    virtual unknown_ret CancelTradeRequest() = 0; //argc: 2, index 223
    virtual unknown_ret HideFriend() = 0; //argc: 3, index 224
    virtual SteamAPICall_t GetFollowerCount(CSteamID steamID) = 0; //argc: 2, index 225
    virtual SteamAPICall_t IsFollowing(CSteamID steamID) = 0; //argc: 2, index 226
    virtual SteamAPICall_t EnumerateFollowingList(uint32 unStartIndex) = 0; //argc: 1, index 227
    virtual unknown_ret RequestFriendMessageHistory() = 0; //argc: 2, index 228
    virtual unknown_ret RequestFriendMessageHistoryForOfflineMessages() = 0; //argc: 0, index 229
    virtual unknown_ret GetCountFriendsWithOfflineMessages() = 0; //argc: 0, index 230
    virtual unknown_ret GetFriendWithOfflineMessage() = 0; //argc: 1, index 231
    virtual unknown_ret ClearFriendHasOfflineMessage() = 0; //argc: 1, index 232
    virtual unknown_ret RequestEmoticonList() = 0; //argc: 0, index 233
    virtual unknown_ret GetEmoticonCount() = 0; //argc: 0, index 234
    virtual unknown_ret GetEmoticonName() = 0; //argc: 1, index 235
    virtual unknown_ret ClientLinkFilterInit() = 0; //argc: 0, index 236
    virtual unknown_ret LinkDisposition() = 0; //argc: 1, index 237
    virtual const char *GetFriendPersonaName_Public(CSteamID steamIDFriend) = 0; //argc: 2, index 238
    virtual const char *GetPlayerNickname_Public(CSteamID steamIDFriend) = 0; //argc: 2, index 239
    virtual unknown_ret SetFriendsUIActiveClanChatList() = 0; //argc: 2, index 240
    virtual int GetNumChatsWithUnreadPriorityMessages() = 0; //argc: 0, index 241
    virtual void SetNumChatsWithUnreadPriorityMessages(int iNumChatsWithUnreadPriorityMessages) = 0; //argc: 1, index 242
    virtual bool RegisterProtocolInOverlayBrowser(const char *pchProtocol) = 0; //argc: 1, index 243
    virtual bool HandleProtocolForOverlayBrowser(AppId_t appid, const char *urlToForward) = 0; //argc: 2, index 244
    virtual SteamAPICall_t RequestEquippedProfileItems(CSteamID steamID) = 0; //argc: 2, index 245
    virtual bool BHasEquippedProfileItem(CSteamID steamID, ECommunityProfileItemType itemType) = 0; //argc: 3, index 246
    virtual const char *GetProfileItemPropertyString(CSteamID steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop) = 0; //argc: 4, index 247
    virtual uint32 GetProfileItemPropertyUint(CSteamID steamID, ECommunityProfileItemType itemType, ECommunityProfileItemProperty prop) = 0; //argc: 4, index 248
    virtual SteamAPICall_t DownloadCommunityItemAsset(CSteamID steamID, const char*, const char*) = 0; //argc: 4, index 249
    virtual const char *GetMultiplayerSessionShareURL(AppId_t nAppID) = 0; //argc: 1, index 250
};