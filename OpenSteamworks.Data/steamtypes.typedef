// This is not a c header file, only its typedef syntax is supported.
// All the typedefs given here will have typed structs generated.
// Use C# types.

namespace OpenSteamworks.Data;

// Ideally these would be in interop.typedef as they make more sense there, but it would require consumers to import OpenSteamworks.Data.Interop which is not intended.
typedef Int32 unknown;
typedef Int64 unknown64;

xmldoc unknown {
    /// <summary>
    /// Used for unknown returns and arguments. 32-bit.
    /// </summary>
}

xmldoc unknown64 {
    /// <summary>
    /// Used for unknown returns and arguments. 64-bit.
    /// </summary>
}

// Handle types
typedef Int32 HSteamPipe;
typedef Int32 HSteamUser;
typedef UInt32 HImage;
typedef UInt32 HHTMLBrowser;
typedef UInt32 HImage;
typedef UInt32 HSharedConnection;
typedef UInt32 HSharedConnectionMsg;
typedef UInt32 HHTTPRequest;
typedef UInt32 HHTTPCookieContainer;

// _t types
typedef Int32 LibraryFolder_t;
typedef UInt32 AppId_t {
	public static readonly AppId_t Invalid = new(0);
}

typedef UInt32 RTime32 {
	public static explicit operator DateTime(RTime32 me)
        => DateTimeOffset.FromUnixTimeSeconds(me.m_value).DateTime;
    
    public static RTime32 FromDateTime(DateTime dateTime)
        => (RTime32)((DateTimeOffset)dateTime).ToUnixTimeSeconds();
}

typedef UInt32 DepotId_t;
typedef UInt32 AccountID_t;
typedef UInt32 RemotePlaySessionID_t;
typedef UInt64 GID_t;
typedef UInt64 SteamAPICall_t;
typedef UInt64 UGCFileWriteStreamHandle_t;